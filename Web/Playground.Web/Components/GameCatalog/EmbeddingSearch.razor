@page "/gamecatalog/search"

@using Playground.Web.Components.GameCatalog.Shared
@using Playground.Web.Components.GameCatalog.Dialogs

@inject GameCatalogClient GameCatalogClient
@inject IDialogService DialogService

<PageTitle>Game Catalog</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">
    Text embedding search 
    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="OpenGenerateEmbeddingsDialog">Generate</MudButton>
</MudText>
<MudText Class="mb-8">
    Ever wondered how an AI finds the difference between "cat videos" and "quantum physics"? <br />
    Welcome to a text embedding search playground, where your words are magically transformed into numbers, <br />
    and those numbers help you find what you never knew you needed. It's like Google, but with more existential dread.
</MudText>

<MudText Typo="Typo.h4" GutterBottom="true">Inspiration:</MudText>
<MudText Class="mb-8 pl-8">
<ul>
    <li>recent puzzle games</li>
    <li>co-op platformers released after 2020</li>
    <li>games with time travel mechanics</li>
    <li>highly rated singleplayer adventures</li>
    <li>cheap multiplayer shooters</li>
    <li>fantasy RPGs available on Steam Deck</li>
    <li>story rich indie games</li>
    <li>games with positive reviews and controller support</li>
    <li>classic action games for Linux</li>
    <li>new releases with great soundtracks</li>
</ul>
</MudText>

<MudTextField @bind-Value="SearchQuery" Placeholder="Search games..." Variant="Variant.Outlined" FullWidth="true" Disabled="@isLoading"
    Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="SearchGames" 
    OnKeyUp="SearchOnEnter" />

<MudProgressLinear Class="mt-2" Color="Color.Primary" Indeterminate="true" Style="@(isLoading ? "visibility: visible;" : "visibility: hidden;")" />

@if (games.Any())
{
    <MudGrid Class="mt-8">
        @foreach (var game in games)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <GameCard Game="@game" />
            </MudItem>
        }
    </MudGrid>
}
else if (!isLoading && !string.IsNullOrWhiteSpace(SearchQuery))
{
    <MudText Typo="Typo.body1" Class="mt-8">No games found for "<strong>@SearchQuery</strong>"</MudText>
}


@code {
    private string SearchQuery { get; set; } = string.Empty;
    private Game[] games = [];
    private bool isLoading;

    private async Task SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await SearchGames();
        }
    }

    private async Task SearchGames()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            games = [];
            return;
        } 
        
        isLoading = true;
        games = [];

        try
        {
            games = await GameCatalogClient.Search(SearchQuery);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OpenGenerateEmbeddingsDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        await DialogService.ShowAsync<GenerateEmbeddingsDialog>("Generate Embeddings...", options: options);
    }
}
