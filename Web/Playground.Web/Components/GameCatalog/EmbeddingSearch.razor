@page "/gamecatalog/search"

@using Playground.Web.Components.GameCatalog
@inject GameCatalogClient GameCatalogClient
@inject IDialogService DialogService

<PageTitle>Game Catalog</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">
    Text embedding search 
    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="OpenGenerateEmbeddingsDialog">Generate</MudButton>
</MudText>
<MudText Class="mb-8">
    Ever wondered how an AI finds the difference between "cat videos" and "quantum physics"? <br />
    Welcome to a text embedding search playground, where your words are magically transformed into numbers, <br />
    and those numbers help you find what you never knew you needed. It's like Google, but with more existential dread.
</MudText>

<MudText Typo="Typo.h4" GutterBottom="true">Inspiration:</MudText>
<MudText Class="mb-8 pl-8">
<ul>
    <li>recent puzzle games</li>
    <li>co-op platformers released after 2020</li>
    <li>games with time travel mechanics</li>
    <li>highly rated singleplayer adventures</li>
    <li>cheap multiplayer shooters</li>
    <li>fantasy RPGs available on Steam Deck</li>
    <li>story rich indie games</li>
    <li>games with positive reviews and controller support</li>
    <li>classic action games for Linux</li>
    <li>new releases with great soundtracks</li>
</ul>
</MudText>

<MudGrid>
    <MudItem xs="6">
        <MudPaper Class="pa-4" Elevation="2">
            <MudTextField @bind-Value="SearchQuery" Placeholder="Search games..." Variant="Variant.Outlined" FullWidth="true" 
                Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="SearchGames" Disabled="@IsLoading" />
            
            <MudProgressLinear Class="mt-2" Color="Color.Primary" Indeterminate="true" Style="@(IsLoading ? "visibility: visible;" : "visibility: hidden;")" />

            @if (Games.Any())
            {
                <MudTable Items="@Games" Hover="true" Breakpoint="Breakpoint.Sm" Class="mt-8">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Title</MudTh>
                        <MudTh>Description</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Title">@context.Title</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private string SearchQuery { get; set; } = string.Empty;
    private Game[] Games { get; set; } = [];
    private bool IsLoading { get; set; }

    private async Task SearchGames()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery)) return;
        
        IsLoading = true;
        Games = [];

        try
        {
            Games = await GameCatalogClient.Search(SearchQuery);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OpenGenerateEmbeddingsDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        await DialogService.ShowAsync<GenerateEmbeddingsDialog>("Generate Embeddings...", options: options);
    }
}
