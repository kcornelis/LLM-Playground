@page "/gamecatalog/chat"
@using System.Text

@inject Chat.ChatClient ChatClient

<PageTitle>Game Catalog</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">
    Chat with tools and suggestions
</MudText>

<MudGrid>
    <MudItem xs="6">
        <MudPaper Class="pa-4" Elevation="2">

            <MudExpansionPanels Outlined="false" Elevation="0" Class="mb-8">
                <MudExpansionPanel Text="System prompt" >
                    <MudTextField @bind-Value="SystemPrompt" Variant="Variant.Outlined" Lines="8" />
                </MudExpansionPanel>
            </MudExpansionPanels>

            @foreach(var message in messages.Where(m => m.Role != "system"))
            {
                <ChatItem Message="@message" />
            }

            <MudTextField @bind-Value="Message" Placeholder="Ask about games, tags, price, reviews..." Variant="Variant.Outlined" FullWidth="true" Disabled="@isLoading"
                Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="GetAnswer" 
                OnKeyUp="AnswerOnEnter" />
            
            <MudProgressLinear Class="mt-2" Color="Color.Primary" Indeterminate="true" Style="@(isLoading ? "visibility: visible;" : "visibility: hidden;")" />
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    private string SystemPrompt { get; set; } = CreateSystemPrompt();
    private string Message { get; set; } = string.Empty;
    private List<Message> messages = new();
    private bool isLoading;

    private async Task AnswerOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await GetAnswer();
        }
    }

    private async Task GetAnswer()
    {
        if (string.IsNullOrWhiteSpace(Message)) return;
        
        isLoading = true;

        if(messages.Count == 0)
        {
            messages.Add(new Message{ Role = "system", Content = SystemPrompt });
        }

        try
        {
            messages.Add(new Message{ Role = "user", Content = Message });
            Message = string.Empty;

            var request = new GetResponseRequest();
            request.Messages.AddRange(messages);

            var message = new Message { Role = "assistant", Content = "" };
            messages.Add(message);

            using var call = ChatClient.GetStreamingResponse(request);
            await foreach (var m in call.ResponseStream.ReadAllAsync())
            {
                message.Content += m.Message.Content;
                ChatItem.NotifyChanged(message);
            }
        }
        catch
        {
            messages.Add(new Message{ Role = "assistant", Content = "We couldn't process your request right now." });
        }
        finally
        {
            isLoading = false;
        }
    }

    // game link does not exist, this is just to test markdown rendering
    private static string CreateSystemPrompt()
    {
        return @"You are a helpful game catalog assistant.
Do not answer questions about anything else.
Keep the response descriptive, don't just return a list with specifications.
Don't add game characteristics by default, just when asked.
Use only simple markdown to format your responses.

If you add a game to the response, format it as a markdown link with the following syntax: [{title}](/games/{id}).
   - replace {title} with the game title and {id} with the game id
   - keep the url relative

Use the search tool to find relevant games
   - can include unrelated results, only add relevant games in your response
   - accepts a search phrase that does a semantic search over the game catalog
   - the embedding used for the semantic search contains the title, description, tags, platforms and popularity 

Here is some information about the game catalog to help you:
   - the current year is 2023
   - recent games are from 2023 and 2021
   - older games are from before 2020
   - retro games are from before 2000
   - expensive games are above $60
   - cheap games are below $20
   - free games are $0
";
    }
}