@page "/gamecatalog/chat"
@using System.Text

@inject Chat.ChatClient ChatClient

<PageTitle>Game Catalog</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">
    Chat with tools and suggestions
</MudText>

<MudGrid>
    <MudItem xs="6">
        <MudPaper Class="pa-4" Elevation="2">

        <MudExpansionPanels Outlined="false" Elevation="0" Class="mb-8">
            <MudExpansionPanel Text="System prompt" >
                <MudTextField @bind-Value="SystemPrompt" Variant="Variant.Outlined" Lines="8" />
            </MudExpansionPanel>
        </MudExpansionPanels>

            @foreach(var message in messages.Where(m => m.Role != "system"))
            {
                if(message.Role == "user")
                {
                    <MudChat ChatPosition="ChatBubblePosition.End">
                        <MudChatBubble>
                            @ToMarkup(message.Content)
                        </MudChatBubble>
                    </MudChat>
                }
                else
                {
                    <MudChat ChatPosition="ChatBubblePosition.Start">
                        <MudAvatar Class="pa-2">                        
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 18v-5.25m0 0a6.01 6.01 0 0 0 1.5-.189m-1.5.189a6.01 6.01 0 0 1-1.5-.189m3.75 7.478a12.06 12.06 0 0 1-4.5 0m3.75 2.383a14.406 14.406 0 0 1-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 1 0-7.517 0c.85.493 1.509 1.333 1.509 2.316V18" />
                            </svg>
                        </MudAvatar>
                        <MudChatBubble>
                            <assistant-message markdown="@message.Content"></assistant-message>
                        </MudChatBubble>
                    </MudChat>
                }
            }

            <MudTextField @bind-Value="Message" Placeholder="Ask about games, tags, price, reviews..." Variant="Variant.Outlined" FullWidth="true" Disabled="@isLoading"
                Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="GetAnswer" 
                OnKeyUp="AnswerOnEnter" />
            
            <MudProgressLinear Class="mt-2" Color="Color.Primary" Indeterminate="true" Style="@(isLoading ? "visibility: visible;" : "visibility: hidden;")" />
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    private string SystemPrompt { get; set; } = CreateSystemPrompt();
    private string Message { get; set; } = string.Empty;
    private List<Message> messages = new();
    private bool isLoading;

    private async Task AnswerOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await GetAnswer();
        }
    }

    private async Task GetAnswer()
    {
        if (string.IsNullOrWhiteSpace(Message)) return;
        
        isLoading = true;

        if(messages.Count == 0)
        {
            messages.Add(new Message{ Role = "system", Content = SystemPrompt });
        }

        try
        {
            messages.Add(new Message{ Role = "user", Content = Message });
            Message = string.Empty;

            var request = new GetResponseRequest();
            request.Messages.AddRange(messages);

            var result = await ChatClient.GetResponseAsync(request);

            messages.Add(result.Message);
        }
        catch
        {
            messages.Add(new Message{ Role = "assistant", Content = "We couldn't process your request right now." });
        }
        finally
        {
            isLoading = false;
        }
    }

    private static string CreateSystemPrompt()
    {
        return @"You are a helpful game catalog assistant.
Do not answer questions about anything else.
Use only simple markdown to format your responses.

Use the search tool to find relevant games. 
The search tool can include unrelated results if nothing is found, only add relevant games in your response.
The search tool accepts a search phrase that does a semantic search over the game catalog. 
The embedding contains the title, description, tags, platforms and popularity. Include these in the search phrase as needed.

The current year is 2025, recent games are from 2024 and 2025, older games are from before 2020, retro games are from before 2000.
Expensive games are above $60, cheap games are below $20, free games are $0.
";
    }
}